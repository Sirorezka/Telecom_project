####
####  --- Data preprocessing ----
####
sec <- data[,'tstamp']/1000
data[,'tstamp'] <- as.POSIXct(sec,origin = "1970-01-01",tz = "Europe/Moscow")
round(data[,'tstamp'], units = c("mins"))
data[,'tstamp'] <- round(data[,'tstamp'], units = c("mins"))
list(round(data[,'tstamp'], units = c("mins")))
as.list(round(data[,'tstamp'], units = c("mins")))
c1 <- round(data[,'tstamp'], units = c("mins"))
View(data)
source('~/GitHub/test_task/test_problem.R')
if (!require (xlsx)) install.packages ("xlsx")
if (!require (dplyr)) install.packages ("dplyr")
if (!require (tidyr)) install.packages ("tidyr")
require (xlsx)
require (dplyr)
####
####  --- Reading data sets  ----
####
mywd <- "C:/Users/Johnny/Documents/GitHub/test_task"
setwd (mywd)
getwd()
data_fact <- read.xlsx ("data/01_facts.xlsx", sheetIndex=1, header= FALSE)
data_fact <- data_fact[order(data_fact [,1]),]
data <- read.csv2 ("data/02_Data_test.csv", header= TRUE)
####
####  --- Checking for duplicates in fact table  ----
####
data_fact <- as.data.frame(data_fact)
c1 <- as.data.frame(data_fact[,1])
c2 <- as.data.frame(data_fact [,2])
c1[duplicated(bind_rows(c1,c2)),]
data_fact[data_fact[,1]==158528850493,]
rm(c1,c2)
####
####  --- Data preprocessing ----
####
sec <- data[,'tstamp']/1000
data[,'tstamp'] <- as.POSIXct(sec,origin = "1970-01-01",tz = "Europe/Moscow")
c1 <- round(data[,'tstamp'], units = c("mins"))
data[,'tstamp'] <- c1
if (!require (xlsx)) install.packages ("xlsx")
if (!require (dplyr)) install.packages ("dplyr")
if (!require (tidyr)) install.packages ("tidyr")
require (xlsx)
require (dplyr)
####
####  --- Reading data sets  ----
####
mywd <- "C:/Users/Johnny/Documents/GitHub/test_task"
setwd (mywd)
getwd()
data_fact <- read.xlsx ("data/01_facts.xlsx", sheetIndex=1, header= FALSE)
data_fact <- data_fact[order(data_fact [,1]),]
data <- read.csv2 ("data/02_Data_test.csv", header= TRUE)
####
####  --- Checking for duplicates in fact table  ----
####
data_fact <- as.data.frame(data_fact)
c1 <- as.data.frame(data_fact[,1])
c2 <- as.data.frame(data_fact [,2])
c1[duplicated(bind_rows(c1,c2)),]
data_fact[data_fact[,1]==158528850493,]
rm(c1,c2)
####
####  --- Data preprocessing ----
####
sec <- data[,'tstamp']/1000
data[,'tstamp'] <- as.POSIXct(sec,origin = "1970-01-01",tz = "Europe/Moscow")
View(data)
len(c1)
length(c1)
c1 <- round(data[,'tstamp'], units = c("mins"))
length(c1)
c1[0]
c1[1]
c1[2]
c1 <- as.data.frame(c1)
data[,'tstamp'] <- c1
View(data)
source('~/GitHub/test_task/test_problem.R')
source('~/GitHub/test_task/test_problem.R')
source('~/GitHub/test_task/test_problem.R')
source('~/GitHub/test_task/test_problem.R')
data_tac <- read.csv2 ("data/03_devices.csv", header= TRUE)
data_tac
data_tac <- read.csv2 ("data/03_devices.csv", header= TRUE,sep = ",", quote = """")
data_tac <- read.csv2 ("data/03_devices.csv", header= TRUE,sep = ",", quote = "")
data_tac <- read.csv2 ("data/03_devices.csv", header= TRUE,sep = ",", quote = """"")
data_tac <- read.csv2 ("data/03_devices.csv", header= TRUE,sep = ",", quote = """")
data_tac <- read.csv2 ("data/03_devices.csv", header= TRUE,sep = ",", quote = """)
data_tac <- read.csv2 ("data/03_devices.csv", header= TRUE,sep = ",", quote = "/"")
data_tac <- read.csv2 ("data/03_devices.csv", header= TRUE,sep = ",", quote = '"')
View(data_tac)
source('~/GitHub/test_task/test_problem.R')
data_tac <- read.csv2 ("data/03_devices.csv", header= TRUE,sep = ",", quote = '"')
source('~/GitHub/test_task/test_problem.R')
read.csv2 ("data/03_devices.csv", header= TRUE,sep = ",", quote = '"')
read.csv2 ("data/03_devices.csv", header= TRUE,sep = ",", quote = '"')
View(data_tac)
source('~/GitHub/test_task/test_problem.R')
source('~/GitHub/test_task/test_problem.R')
read.csv2 ("data/03_devices.csv", header= TRUE,sep = ",", quote = '"')
read.csv2 ("data/03_devices.csv", header= TRUE,, quote = '"')
read.csv2 ("data/03_devices.csv", header= TRUE, quote = '"')
data_tac <- read.csv2 ("data/03_devices.csv", header= TRUE,sep = ",", quote = '"')
View(data_tac)
source('~/GitHub/test_task/test_problem.R')
source('~/GitHub/test_task/test_problem.R')
data_tac <- read.csv2 ("data/03_devices.csv", header= TRUE,sep = ",", quote = '"')
View(data)
source('~/GitHub/test_task/test_problem.R')
View(data)
data_fact[data_fact[,1]==158528850493,]
data_fact[data_fact[,1]==158528850493,2]
data_fact[data_fact[,1]==158528850493,2][1]
source('~/GitHub/test_task/test_problem.R')
as.string(data_fact[data_fact[,1]==158528850493,2])
as.character(data_fact[data_fact[,1]==158528850493,2])
source('~/GitHub/test_task/test_problem.R')
data[,'msisdn'] == 158524011021
gr1 = c(158524011021, 158530004641, 158528850493)
data[data[,'msisdn'] == 158524011021,[]
data[data[,'msisdn'] == 158524011021,]
data[data[,'msisdn'] == 158524011021,c("tstamp","long","lat")]
data[data[,'msisdn'] == 158524011021,]
data[data[,'msisdn'] == 158524011021,c("tstamp","long","lat","start_angle","end_angle")]]
data[data[,'msisdn'] == 158524011021,c("tstamp","long","lat","start_angle","end_angle")]
require (ggplot)
require (ggplot2)
if (!require (ggplot2)) install.packages ("ggplot2")
require (ggplot2)
source('~/GitHub/test_task/test_problem.R')
source('~/GitHub/test_task/test_problem.R')
gr1 <- c(158524011021, 158530004641, 158528850493)
gr_sample <- data[data[,'msisdn'] == 158524011021,c("tstamp","long","lat","start_angle","end_angle")]
gr_sample <- data[data[,'msisdn'] == 158524011021,c("msisdn","tstamp","long","lat","start_angle","end_angle")]
qplot(long, lat, data=gr_sample,color=msisdn,
xlab="Latitude", ylab="Longitude")
gr_sample <- data[data[,'msisdn'] in gr1,c("msisdn","tstamp","long","lat","start_angle","end_angle")]
gr_sample <- data[data[,'msisdn'] %in% gr1,c("msisdn","tstamp","long","lat","start_angle","end_angle")]
qplot(long, lat, data=gr_sample,color=msisdn,
xlab="Latitude", ylab="Longitude")
gr_sample
class(gr_sample)
class(gr_sample.columns)
class(gr_sample.column)
class(gr_sample)
class(gr_sample[])
attributes(gr_sample)
class(gr_sample.names)
class(gr_sample$names)
class(gr_sample[,'msisdn'])
class(gr_sample[,'msisdn']) <- 'character'
gr_sample
class(gr_sample[,'msisdn'])
qplot(long, lat, data=gr_sample,color=msisdn,
xlab="Latitude", ylab="Longitude")
source('~/GitHub/test_task/test_problem.R')
source('~/GitHub/test_task/test_problem.R')
source('~/GitHub/test_task/test_problem.R')
source('~/GitHub/test_task/test_problem.R')
gr_sample
source('~/GitHub/test_task/test_problem.R')
source('~/GitHub/test_task/test_problem.R')
data[,'msisdn']
unique(data[,'msisdn'])
unique(data[,'msisdn'])
unique(data[,'msisdn']) %in% gr1
source('~/GitHub/test_task/test_problem.R')
all_msisdn[all_msisdn %in% gr1]
all_msisdn %in% gr1
all_msisdn[all_msisdn %in% gr1]
all_msisdn[all_msisdn %in% gr1]
all_msisdn
all_msisdn <- unique(data[,'msisdn'])
all_msisdn[all_msisdn %in% gr1]
source('~/GitHub/test_task/test_problem.R')
all_msisdn
gr1 <- c(158524011021, 158530004641, 158528850493, 158504535789)
all_msisdn[all_msisdn %in% gr1]
gr_sample <- data[data[,'msisdn'] %in% gr1,c("msisdn","tstamp","long","lat","start_angle","end_angle")]
class(gr_sample[,'msisdn']) <- 'character'
qplot(long, lat, data=gr_sample,color=msisdn,
xlab="Latitude", ylab="Longitude")
gr1 <- c(158524011021, 158530004641, 158528850493)
all_msisdn[all_msisdn %in% gr1]
gr_sample <- data[data[,'msisdn'] %in% gr1,c("msisdn","tstamp","long","lat","start_angle","end_angle")]
class(gr_sample[,'msisdn']) <- 'character'
qplot(long, lat, data=gr_sample,color=msisdn,
xlab="Latitude", ylab="Longitude")
all_msisdn
combinations(all_msisdn,repeats.allowed=T)
combn(all_msisdn,m=2,repeats.allowed=T)
dd <- combn(all_msisdn,m=2,repeats.allowed=T)
View(dd)
require (gtools)
if (!require (gtools)) install.packages ("gtools")
require (gtools)
rm(dd)
source('~/GitHub/test_task/test_problem.R')
dd <- combinations(len(all_msisdn), 2, all_msisdn, repeats.allowed=F)
dd <- combinations(length(all_msisdn), 2, all_msisdn, repeats.allowed=F)
dd <- combinations(1, 2, all_msisdn, repeats.allowed=F)
dd <- combinations(10, 2, all_msisdn, repeats.allowed=F)
dd <- combinations(10, 2, all_msisdn, repeats.allowed=F)
dd
dd[0]
dd[1,1]
dd[2,1]
View(dd)
source('~/GitHub/test_task/test_problem.R')
all_msisdn <- as.character(unique(data[,'msisdn']))
dd <- combinations(10, 2, all_msisdn, repeats.allowed=F)
dd[2,1]
View(dd)
source('~/GitHub/test_task/test_problem.R')
length(all_msisdn)
dd <- combinations(length(all_msisdn), 2, all_msisdn, repeats.allowed=F)
length(all_msisdn)
dd <- combinations(2361, 2, all_msisdn, repeats.allowed=F)
dd <- combinations(length(all_msisdn), 2, all_msisdn, repeats.allowed=F)
options(expressions=1e5)
dd <- combinations(length(all_msisdn), 2, all_msisdn, repeats.allowed=F)
options(expressions=1e9)
dd <- combinations(length(all_msisdn), 2, all_msisdn, repeats.allowed=F)
source('~/GitHub/test_task/test_problem.R')
all_msisdn <- unique(data[,'msisdn'])
all_msisdn
order(all_msisdn)
all_msisdn <- all_msisdn[order(all_msisdn)]
all_msisdn
combn(all_msisdn,2)
combn(c(1,1,1,1,2,2,2,3,3,4), 3, tabulate, nbins = 4)
table.mat(t(combn(c(1,1,1,1,2,2,2,3,3,4), 3, tabulate, nbins = 4)))
source('~/GitHub/test_task/test_problem.R')
combs(all_msisdn,2)
source('~/GitHub/test_task/test_problem.R')
require (caTools)
install.packages("caTools")
require (caTools)
combs(all_msisdn,2)
source('~/GitHub/test_task/test_problem.R')
source('~/GitHub/test_task/test_problem.R')
z <- all_msisdn
for(i in 1:length(z)){
z[[i]] <- rbind(z[[i]], all_msisdn)
}
length(z)
t <- data.frame()
t <- data.frame()
t <- data.frame(c(NULL,NULL))
t
source('~/GitHub/test_task/test_problem.R')
rbind(z[[1]], all_msisdn)
rbind(z[1], all_msisdn)
rbind(z[1], all_msisdn[all_msisdn>z[1]])
for(i in 1:length(z)){
t <- bind_rows (t,rbind(z[i], all_msisdn[all_msisdn>z[i]]))
}
tt <- as.data.frame(rbind(z[i], all_msisdn[all_msisdn>z[i]]))
tt <- bind_rows (t,)
source('~/GitHub/test_task/test_problem.R')
z <- all_msisdn
tt <- data.frame(c(NULL,NULL))
for(i in 1:length(z)){
t <- as.data.frame(rbind(z[i], all_msisdn[all_msisdn>z[i]]))
tt <- bind_rows (tt,t)
tt <- as.data.frame(tt)
}
View(tt)
cbind(z[1], all_msisdn[all_msisdn>z[1]])
z <- all_msisdn
tt <- data.frame(c(NULL,NULL))
for(i in 1:length(z)){
t <- as.data.frame(cbind(z[i], all_msisdn[all_msisdn>z[i]]))
tt <- bind_rows (tt,t)
tt <- as.data.frame(tt)
}
source('~/GitHub/test_task/test_problem.R')
View(tt)
source('~/GitHub/test_task/test_problem.R')
gr1 <- c(158524011021, 158530004641, 158528850493)
all_msisdn[all_msisdn %in% gr1]
gr_sample <- data[data[,'msisdn'] %in% gr1,c("msisdn","tstamp","long","lat","start_angle","end_angle")]
class(gr_sample[,'msisdn']) <- 'character'
qplot(long, lat, data=gr_sample,color=msisdn,
xlab="Latitude", ylab="Longitude")
gr1 <- c(158524011021, 158530004641, 158528850493,158599857493)
all_msisdn[all_msisdn %in% gr1]
gr_sample <- data[data[,'msisdn'] %in% gr1,c("msisdn","tstamp","long","lat","start_angle","end_angle")]
class(gr_sample[,'msisdn']) <- 'character'
qplot(long, lat, data=gr_sample,color=msisdn,
xlab="Latitude", ylab="Longitude")
gr1 <- c( 158530004641, 158528850493,158599857493)
all_msisdn[all_msisdn %in% gr1]
gr_sample <- data[data[,'msisdn'] %in% gr1,c("msisdn","tstamp","long","lat","start_angle","end_angle")]
class(gr_sample[,'msisdn']) <- 'character'
qplot(long, lat, data=gr_sample,color=msisdn,
xlab="Latitude", ylab="Longitude")
source('~/GitHub/test_task/test_problem.R')
source('~/GitHub/test_task/test_problem.R')
z <- all_msisdn
all_comb <- data.frame(c(NULL,NULL))
#for(i in 1:(length(z)-1)){
for(i in 1:(45)){
t <- as.data.frame(cbind(z[i], all_msisdn[all_msisdn>z[i]]))
all_comb <- bind_rows (all_comb,t)
all_comb <- as.data.frame(all_comb)
}
z <- all_msisdn
all_comb <- data.frame(c(NULL,NULL))
#for(i in 1:(length(z)-1)){
for(i in 1:(45)){
t <- as.data.frame(cbind(z[i], all_msisdn[all_msisdn>z[i]]))
all_comb <- bind_rows (all_comb,t)
all_comb <- as.data.frame(all_comb)
}
z <- all_msisdn
all_comb <- data.frame(c(NULL,NULL))
#for(i in 1:(length(z)-1)){
for(i in 1:(45)){
t <- as.data.frame(cbind(z[i], all_msisdn[all_msisdn>z[i]]))
all_comb <- bind_rows (all_comb,t)
all_comb <- as.data.frame(all_comb)
}
for(i in 1:45){
t <- as.data.frame(cbind(z[i], all_msisdn[all_msisdn>z[i]]))
all_comb <- bind_rows (all_comb,t)
all_comb <- as.data.frame(all_comb)
}
if (!require (xlsx)) install.packages ("xlsx")
if (!require (dplyr)) install.packages ("dplyr")
if (!require (tidyr)) install.packages ("tidyr")
if (!require (ggplot2)) install.packages ("ggplot2")
if (!require (gtools)) install.packages ("gtools")
require (xlsx)
require (dplyr)
require (tidyr)
require (ggplot2)
####
####  --- Reading data sets  ----
####
mywd <- "C:/Users/Johnny/Documents/GitHub/test_task"
setwd (mywd)
getwd()
data_fact <- read.xlsx ("data/01_facts.xlsx", sheetIndex=1, header= FALSE)
data_fact <- data_fact[order(data_fact [,1]),]
data <- read.csv2 ("data/02_Data_test.csv", header= TRUE)
data_tac <- read.csv2 ("data/03_devices.csv", header= TRUE,sep = ",", quote = '"')
####
####  --- Checking for duplicates in fact table  ----
####
data_fact <- as.data.frame(data_fact)
c1 <- as.data.frame(data_fact[,1])
c2 <- as.data.frame(data_fact [,2])
c1[duplicated(bind_rows(c1,c2)),]
as.character(data_fact[data_fact[,1]==158528850493,2])
data_fact
rows(data_fact)
num_rows(data_fact)
num_rows(data_fact)
attributes(data_fact)
rows(data_fact)
nrows(data_fact)
nrow(data_fact)
source('~/GitHub/test_task/test_problem.R')
source('~/GitHub/test_task/test_problem.R')
for (i in 1:nrow(data_fact)){
if (data_fact[i,1]>data_fact[i,2]){
k <- data_fact[i,2]
data_fact[i,2]  <- data_fact[i,1]
data_fact[i,1] <- k
}
}
data_fact
data_fact <- as.data.frame(data_fact)
c1 <- as.data.frame(data_fact[,1])
c2 <- as.data.frame(data_fact [,2])
c1[duplicated(bind_rows(c1,c2)),]
as.character(data_fact[data_fact[,1]==158528850493,2])
data_fact[i,1]>data_fact[i,2]
data_fact[,1]>data_fact[,2]
data_fact[,2]>data_fact[,1]
source('~/GitHub/test_task/test_problem.R')
data_fact <- as.data.frame(data_fact)
c1 <- as.data.frame(data_fact[,1])
c2 <- as.data.frame(data_fact [,2])
c1[duplicated(bind_rows(c1,c2)),]
as.character(data_fact[data_fact[,1]==158528850493,2])
for (i in 1:nrow(data_fact)){
if (data_fact[i,1]>data_fact[i,2]){
k <- data_fact[i,2]
data_fact[i,2]  <- data_fact[i,1]
data_fact[i,1] <- k
}
}
rm(c1,c2)
data_fact
source('~/GitHub/test_task/test_problem.R')
sort(data_fact[i,1])
sort(data_fact[,1])
data_fact[sort(data_fact[,1]),]
sort(data_fact[,1])
sorted(data_fact[,1])
sort(data_fact[,1])
data_fact
data_fact <- as.data.frame(data_fact)
data_fact
source('~/GitHub/test_task/test_problem.R')
mywd <- "C:/Users/Johnny/Documents/GitHub/test_task"
setwd (mywd)
getwd()
data_fact <- read.xlsx ("data/01_facts.xlsx", sheetIndex=1, header= FALSE)
data <- read.csv2 ("data/02_Data_test.csv", header= TRUE)
data_tac <- read.csv2 ("data/03_devices.csv", header= TRUE,sep = ",", quote = '"')
####
####  --- Checking for duplicates in fact table  ----
####
data_fact <- as.data.frame(data_fact)
c1 <- as.data.frame(data_fact[,1])
c2 <- as.data.frame(data_fact [,2])
c1[duplicated(bind_rows(c1,c2)),]
as.character(data_fact[data_fact[,1]==158528850493,2])
rm(c1,c2)
# changing places for
for (i in 1:nrow(data_fact)){
if (data_fact[i,1]>data_fact[i,2]){
k <- data_fact[i,2]
data_fact[i,2]  <- data_fact[i,1]
data_fact[i,1] <- k
}
}
data_fact <- data_fact[order(data_fact [,1]),]
data_fact
source('~/GitHub/test_task/test_problem.R')
source('~/GitHub/test_task/test_problem.R')
data_fact <- as.data.frame(data_fact)
c1 <- as.data.frame(data_fact[,1])
c2 <- as.data.frame(data_fact [,2])
c1[duplicated(bind_rows(c1,c2)),]
as.character(data_fact[data_fact[,1]==158528850493,2])
rm(c1,c2)
# switching elements where in first column elem is greater than in second
# and ordering elements
for (i in 1:nrow(data_fact)){
if (data_fact[i,1]>data_fact[i,2]){
k <- data_fact[i,2]
data_fact[i,2]  <- data_fact[i,1]
data_fact[i,1] <- k
}
}
data_fact <- data_fact[order(data_fact [,1]),]
data_fact
source('~/GitHub/test_task/test_problem.R')
source('~/GitHub/test_task/test_problem.R')
####
####  --- Processing fact table  ----
####
# Searching for duplicates in fact table
data_fact <- as.data.frame(data_fact)
c1 <- as.data.frame(data_fact[,1])
c2 <- as.data.frame(data_fact [,2])
c1[duplicated(bind_rows(c1,c2)),]
as.character(data_fact[data_fact[,1]==158528850493,2])
rm(c1,c2)
# switching elements where in first column elem is greater than in second
# and ordering elements
for (i in 1:nrow(data_fact)){
if (data_fact[i,1]>data_fact[i,2]){
k <- data_fact[i,2]
data_fact[i,2]  <- data_fact[i,1]
data_fact[i,1] <- k
}
}
data_fact <- data_fact[order(data_fact [,1]),]
####
####  --- Data preprocessing ----
####
# changing time to minutes
sec <- data[,'tstamp']/1000
data[,'tstamp'] <- as.POSIXct(sec,origin = "1970-01-01",tz = "Europe/Moscow")
c1 <- round(data[,'tstamp'], units = c("mins"))
c1 <- as.data.frame(c1)
data[,'tstamp'] <- c1
all_msisdn <- unique(data[,'msisdn'])
all_msisdn <- all_msisdn[order(all_msisdn)]
z <- all_msisdn
all_comb <- data.frame(c(NULL,NULL))
#for(i in 1:(length(z)-1)){
for(i in 1:45){
t <- as.data.frame(cbind(z[i], all_msisdn[all_msisdn>z[i]]))
all_comb <- bind_rows (all_comb,t)
all_comb <- as.data.frame(all_comb)
}
gr1 <- c( 158530004641, 158528850493,158599857493)
all_msisdn[all_msisdn %in% gr1]
gr_sample <- data[data[,'msisdn'] %in% gr1,c("msisdn","tstamp","long","lat","start_angle","end_angle")]
class(gr_sample[,'msisdn']) <- 'character'
qplot(long, lat, data=gr_sample,color=msisdn,
xlab="Latitude", ylab="Longitude")
gr1 <- c( 158530004641, 158528850493,158524011021)
all_msisdn[all_msisdn %in% gr1]
gr_sample <- data[data[,'msisdn'] %in% gr1,c("msisdn","tstamp","long","lat","start_angle","end_angle")]
class(gr_sample[,'msisdn']) <- 'character'
qplot(long, lat, data=gr_sample,color=msisdn,
xlab="Latitude", ylab="Longitude")
source('~/GitHub/test_task/test_problem.R')
source('~/GitHub/test_task/test_problem.R')
source('~/GitHub/test_task/test_problem.R')
source('~/GitHub/test_task/test_problem.R')
