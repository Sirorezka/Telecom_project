if (!require (xlsx)) install.packages ("xlsx")
if (!require (dplyr)) install.packages ("dplyr")
if (!require (tidyr)) install.packages ("tidyr")
if (!require (ggplot2)) install.packages ("ggplot2")
if (!require (gtools)) install.packages ("gtools")
if (!require (party)) install.packages ("party")
#Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_73')  # for 64 bit Java
if (!require (rJava)) install.packages ("rJava")
if (!require (xlsx)) install.packages ("xlsx")
if (!require (dplyr)) install.packages ("dplyr")
if (!require (tidyr)) install.packages ("tidyr")
if (!require (ggplot2)) install.packages ("ggplot2")
if (!require (gtools)) install.packages ("gtools")
if (!require (party)) install.packages ("party")
if (!require (rpart)) install.packages ("rpart")
if (!require (caret)) install.packages ("caret")
if (!require (geosphere)) install.packages ("geosphere")
if (!require (doParallel)) install.packages ("doParallel")
if (!require (foreach)) install.packages ("foreach")
if (!require(randomForest)) install.packages('randomForest')
if (!require(e1071)) install.packages('e1071')
if (!require(caret)) install.packages('caret')
if (!require(caret)) install.packages('pROC')
require (xlsx)
require (dplyr)
require (tidyr)
require (ggplot2)
require (party)
require (rpart)
require (caret)
require (geosphere)
require (doParallel)
require (foreach)
require(randomForest)
require(caret)
library(pROC)
##
##  --- Setting working directory
##
MAKE_PLOTS = F
USE_TEST_DATA = F
# mywd <- "C:/Users/Administrator/Desktop/Telecom_project"
#mywd <- "C:/Users/Johnny/Documents/GitHub/test_task"
mywd <- "C:/Users/Ivan.Petrov/Documents/GitHub/test_task"
setwd (mywd)
getwd()
source ('my_utils.R')
####
####  --- Reading data sets  ----
####
data_fact <- read.xlsx ("data/01_facts.xlsx", sheetIndex=1, header= FALSE)
data <- read.csv2 ("data/02_Data_test.csv", header= TRUE)
data_tac <- read.csv2 ("data/03_devices.csv", header= FALSE, quote = '"')
nrow(unique(data [,c('lac','cid')]))
####
####  --- Processing tac table  ----
####
tt <- gsub('"','',data_tac[,1], perl=TRUE)
col_names <- strsplit (tt[1],",",perl=TRUE)[[1]]
col_names[2:4] <- c("device_vendor","device_platform","device_type")
tt <- tt[2:length(tt)]
data_tac <- as.data.frame(tt) %>% separate("tt",into = col_names, sep = ",")
####
####  --- Processing fact table  ----
####
# Searching for duplicates in fact table
data_fact <- as.data.frame(data_fact)
c1 <- as.data.frame(data_fact[,1])
c2 <- as.data.frame(data_fact [,2])
c1[duplicated(bind_rows(c1,c2)),]
as.character(data_fact[data_fact[,1]==158528850493,2])
rm(c1,c2)
# switching elements where id in first column is greater than id in second
# and ordering elements
for (i in 1:nrow(data_fact)){
if (data_fact[i,1]>data_fact[i,2]){
k <- data_fact[i,2]
data_fact[i,2]  <- data_fact[i,1]
data_fact[i,1] <- k
}
}
data_fact <- data_fact[order(data_fact [,1]),]
#removing rows which aren't present in data table
del_rows <- data_fact$X1 %in% unique(data$msisdn)
data_fact <- data_fact[del_rows,]
del_rows <- data_fact$X2 %in% unique(data$msisdn)
data_fact <- data_fact[del_rows,]
####
####  --- Preprocessing data table ----
####
# changing time to minutes
sec <- data[,'tstamp']/1000
data[,'tstamp'] <- as.POSIXct(sec,origin = "1970-01-01",tz = "Europe/Moscow")
c1 <- round(data[,'tstamp'], units = c("mins"))
c1 <- as.data.frame(c1)
data[,'tstamp'] <- c1
all_msisdn <- unique(data[,'msisdn'])
all_msisdn <- all_msisdn[order(all_msisdn)]
# joining tac (phone type data, vendor info, platform)
data[,'tac'] <- substr(data[,'imei'],1,8)
data <- data %>% left_join (data_tac, by=("tac"))
data[is.na(data$device_type),"device_type"] = -1
data[is.na(data$device_platform),"device_platform"] = -1
data[is.na(data$device_vendor),"device_vendor"] = -1
# converting long, lat, start_angle, end_angle to numeric
data$long <- as.numeric.factor(data$long)
data$lat <- as.numeric.factor(data$lat)
data$start_angle <- as.numeric.factor(data$start_angle)
data$end_angle <- as.numeric.factor(data$end_angle)
# we need to check if cid is unique and can be used as key for base station:
tb_cid_check <- unique(data[,c('lac','cid')])
tb_cid_check <- tb_cid_check %>% group_by(cid) %>% summarize (mm=length(list(lac)))
if (max(tb_cid_check$mm) == 1) print ("All cids are unique")
####
####  --- Plotting paths ---
####
# plot all data_fact pathes
if (MAKE_PLOTS) plot_all_y_train (data_fact, data, img_path ='plots_imei')
####
####  --- Generating train set ---
####
# Generating all posible combinations of msidns
all_fact_ids <- c(data_fact[,1],data_fact[,2])
sort(all_fact_ids)
y_train <- generate_all_combin (all_fact_ids)
# 'class' column will contain information if two msidn's match
y_train[,"class"] <- 0
# two msidn's match if they are present in fact_data
aa <- paste0(y_train[,"V1"],"_",y_train[,"V2"], collapse = NULL)
bb <- paste0(data_fact[,1],"_",data_fact[,2], collapse = NULL)
class1 <- aa %in% bb
y_train[class1,"class"] <- 1
# Sampling training data:
#
# - We need to take all pairs from class 1.
# - And for clazz 0 we will sample some points that not present in original data
y_train_1 <- y_train[y_train$class==1,]
y_train_0 <- y_train[y_train$class==0,]
y_train_0 <- y_train_0[sample(nrow(y_train_0),1100),]
y_train <- bind_rows(y_train_1,y_train_0)
rm(y_train_0,y_train_1)
if (MAKE_PLOTS) plot_all_y_train (y_train, data)
length(unique(data$msisdn))
####
####  --- Generating test set ---
####
if (USE_TEST_DATA) {
all_msisdn <- unique(data$msisdn)
y_test <- generate_all_combin (all_msisdn)
y_test[,"class"] <- -1
y_train <- bind_rows (y_test,y_train)
max(y_train$class)
}
#Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_73')  # for 64 bit Java
if (!require (rJava)) install.packages ("rJava")
if (!require (xlsx)) install.packages ("xlsx")
if (!require (dplyr)) install.packages ("dplyr")
if (!require (tidyr)) install.packages ("tidyr")
if (!require (ggplot2)) install.packages ("ggplot2")
if (!require (gtools)) install.packages ("gtools")
if (!require (party)) install.packages ("party")
if (!require (rpart)) install.packages ("rpart")
if (!require (caret)) install.packages ("caret")
if (!require (geosphere)) install.packages ("geosphere")
if (!require (doParallel)) install.packages ("doParallel")
if (!require (foreach)) install.packages ("foreach")
if (!require(randomForest)) install.packages('randomForest')
if (!require(e1071)) install.packages('e1071')
if (!require(caret)) install.packages('caret')
if (!require(caret)) install.packages('pROC')
require (xlsx)
require (dplyr)
require (tidyr)
require (ggplot2)
require (party)
require (rpart)
require (caret)
require (geosphere)
require (doParallel)
require (foreach)
require(randomForest)
require(caret)
library(pROC)
##
##  --- Setting working directory
##
MAKE_PLOTS = F
USE_TEST_DATA = F
# mywd <- "C:/Users/Administrator/Desktop/Telecom_project"
mywd <- "C:/Users/Johnny/Documents/GitHub/test_task"
# mywd <- "C:/Users/Ivan.Petrov/Documents/GitHub/test_task"
setwd (mywd)
getwd()
source ('my_utils.R')
####
####  --- Reading data sets  ----
####
data_fact <- read.xlsx ("data/01_facts.xlsx", sheetIndex=1, header= FALSE)
data <- read.csv2 ("data/02_Data_test.csv", header= TRUE)
data_tac <- read.csv2 ("data/03_devices.csv", header= FALSE, quote = '"')
nrow(unique(data [,c('lac','cid')]))
####
####  --- Processing tac table  ----
####
tt <- gsub('"','',data_tac[,1], perl=TRUE)
col_names <- strsplit (tt[1],",",perl=TRUE)[[1]]
col_names[2:4] <- c("device_vendor","device_platform","device_type")
tt <- tt[2:length(tt)]
data_tac <- as.data.frame(tt) %>% separate("tt",into = col_names, sep = ",")
####
####  --- Processing fact table  ----
####
# Searching for duplicates in fact table
data_fact <- as.data.frame(data_fact)
c1 <- as.data.frame(data_fact[,1])
c2 <- as.data.frame(data_fact [,2])
c1[duplicated(bind_rows(c1,c2)),]
as.character(data_fact[data_fact[,1]==158528850493,2])
rm(c1,c2)
# switching elements where id in first column is greater than id in second
# and ordering elements
for (i in 1:nrow(data_fact)){
if (data_fact[i,1]>data_fact[i,2]){
k <- data_fact[i,2]
data_fact[i,2]  <- data_fact[i,1]
data_fact[i,1] <- k
}
}
data_fact <- data_fact[order(data_fact [,1]),]
#removing rows which aren't present in data table
del_rows <- data_fact$X1 %in% unique(data$msisdn)
data_fact <- data_fact[del_rows,]
del_rows <- data_fact$X2 %in% unique(data$msisdn)
data_fact <- data_fact[del_rows,]
####
####  --- Preprocessing data table ----
####
# changing time to minutes
sec <- data[,'tstamp']/1000
data[,'tstamp'] <- as.POSIXct(sec,origin = "1970-01-01",tz = "Europe/Moscow")
c1 <- round(data[,'tstamp'], units = c("mins"))
c1 <- as.data.frame(c1)
data[,'tstamp'] <- c1
all_msisdn <- unique(data[,'msisdn'])
all_msisdn <- all_msisdn[order(all_msisdn)]
# joining tac (phone type data, vendor info, platform)
data[,'tac'] <- substr(data[,'imei'],1,8)
data <- data %>% left_join (data_tac, by=("tac"))
data[is.na(data$device_type),"device_type"] = -1
data[is.na(data$device_platform),"device_platform"] = -1
data[is.na(data$device_vendor),"device_vendor"] = -1
# converting long, lat, start_angle, end_angle to numeric
data$long <- as.numeric.factor(data$long)
data$lat <- as.numeric.factor(data$lat)
data$start_angle <- as.numeric.factor(data$start_angle)
data$end_angle <- as.numeric.factor(data$end_angle)
# we need to check if cid is unique and can be used as key for base station:
tb_cid_check <- unique(data[,c('lac','cid')])
tb_cid_check <- tb_cid_check %>% group_by(cid) %>% summarize (mm=length(list(lac)))
if (max(tb_cid_check$mm) == 1) print ("All cids are unique")
####
####  --- Plotting paths ---
####
# plot all data_fact pathes
if (MAKE_PLOTS) plot_all_y_train (data_fact, data, img_path ='plots_imei')
####
####  --- Generating train set ---
####
# Generating all posible combinations of msidns
all_fact_ids <- c(data_fact[,1],data_fact[,2])
sort(all_fact_ids)
y_train <- generate_all_combin (all_fact_ids)
# 'class' column will contain information if two msidn's match
y_train[,"class"] <- 0
# two msidn's match if they are present in fact_data
aa <- paste0(y_train[,"V1"],"_",y_train[,"V2"], collapse = NULL)
bb <- paste0(data_fact[,1],"_",data_fact[,2], collapse = NULL)
class1 <- aa %in% bb
y_train[class1,"class"] <- 1
# Sampling training data:
#
# - We need to take all pairs from class 1.
# - And for clazz 0 we will sample some points that not present in original data
y_train_1 <- y_train[y_train$class==1,]
y_train_0 <- y_train[y_train$class==0,]
y_train_0 <- y_train_0[sample(nrow(y_train_0),1100),]
y_train <- bind_rows(y_train_1,y_train_0)
rm(y_train_0,y_train_1)
if (MAKE_PLOTS) plot_all_y_train (y_train, data)
length(unique(data$msisdn))
####
####  --- Generating test set ---
####
if (USE_TEST_DATA) {
all_msisdn <- unique(data$msisdn)
y_test <- generate_all_combin (all_msisdn)
y_test[,"class"] <- -1
y_train <- bind_rows (y_test,y_train)
max(y_train$class)
}
y_train$class
data$msisdn
data %>% group_by(msisdn) %>% summarize (base_st_visited = count(cid))
data %>% group_by(msisdn) %>% summarize (base_st_visited = length(cid))
data %>% group_by(msisdn) %>% summarize (base_st_visited = length(unique(cid)))
data %>% group_by(msisdn) %>% summarize (base_st_visited = length(unique(cid)))
data_cids <- data %>% group_by(msisdn) %>% summarize (base_st_visited = length(unique(cid)))
qplot(data_cids, geom="histogram")
data_cids
qplot(data_cids$base_st_visited, geom="histogram")
qplot(data_cids$base_st_visited, geom="histogram", xlab="dfd")
qplot(data_cids$base_st_visited, geom="histogram", xlab="Number of Base Stations visited by one msisdn")
qplot(data_cids$base_st_visited,
xlim = c(0,10),
geom="histogram",
xlab="Number of Base Stations visited by one msisdn")
qplot(data_cids$base_st_visited,
xlim = c(-1,40),
geom="histogram",
xlab="Number of Base Stations visited by one msisdn")
xlim = c(-1,9990),
qplot(data_cids$base_st_visited,
xlim = c(-1,9990),
geom="histogram",
xlab="Number of Base Stations visited by one msisdn")
qplot(data_cids$base_st_visited,
#xlim = c(-1,9990),
geom="histogram",
xlab="Number of Base Stations visited by one msisdn")
qplot(data_cids$base_st_visited,
#xlim = c(-1,200),
geom="histogram",
xlab="Number of Base Stations visited by one msisdn")
qplot(data_cids$base_st_visited,
xlim = c(-1,200),
geom="histogram",
xlab="Number of Base Stations visited by one msisdn")
qplot(data_cids$base_st_visited,
xlim = c(-1,100),
geom="histogram",
xlab="Number of Base Stations visited by one msisdn")
qplot(data_cids$base_st_visited,
xlim = c(-1,50),
geom="histogram",
xlab="Number of Base Stations visited by one msisdn")
qplot(data_cids$base_st_visited,
xlim = c(-1,50),
geom = "histogram",
xlab = "Number of Base Stations visited by one msisdn",
ylab = "group count")
qplot(data_cids$base_st_visited,
xlim = c(-1,300),
geom = "histogram",
xlab = "Number of Base Stations visited by one msisdn",
ylab = "group count")
